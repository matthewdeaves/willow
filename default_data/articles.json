[
    {
        "user_id": "1ce2bfdd-2272-4042-8b6e-818a9af2e8fd",
        "kind": "article",
        "featured": false,
        "title": "PHPUnit Testing: How and why it is done for Willow CMS",
        "lead": "",
        "slug": "phpunit-testing-how-and-why-it-is-done-for-willow-cms",
        "body": "<p>This post is about how I've setup PHPUnit on the local development environment and on GitHub Actions for Willow CMS. At the time of writing, Willow has 116 tests and 414 assertions. This gives me a reasonable level of confidence to ensure the reliability and quality of the codebase. Here are the key components of my testing setup how they contribute to what is on the way to being a well-tested application.<\/p><h3>1. PHPUnit Configuration (phpunit.xml.dist)<\/h3><p>The `phpunit.xml.dist` file is the main PHPUnit configuration. It defines important settings such as memory limits, error reporting, and the test suite structure. It's configured to include the `tests\/TestCase\/` directory, where all my test cases live. It also configures PHPUnit to use the CakePHP fixture extension, which simplifies database setup for testing. You get this for free with a CakePHP installation. One thing I have customised is the randomisation of tests with `executionOrder=\"random\"`. Randomizing the test execution order is a good way to ensure you don't have hidden dependencies between tests. When tests are run in a fixed order, it's possible for one test to inadvertently rely on the state or side effects of another test, and you'd never know this when executing the tests in the same order on every run. Good tests are truly independent and self-contained. Another customisation (but one since removed in recent commits) is the inclusion of a clean-up class I'd written in PHP that ran after test execution. I was having issues with permissions between the Docker development environment and my host file system after running tests. Suffice to say, it is possible to use the `phpunit.xml.dist` file to configure PHP code that you want to run at various points of PHPUnit execution. You can take a look at the <a href=\"https:\/\/github.com\/matthewdeaves\/willow\/blob\/59f7b409f7d6f77688953223a8b2e0bfa9ae8e45\/phpunit.xml.dist#L31\" target=\"_self\">configuration<\/a> and <a href=\"https:\/\/github.com\/matthewdeaves\/willow\/blob\/59f7b409f7d6f77688953223a8b2e0bfa9ae8e45\/tests\/Cleanup.php\" target=\"_self\">code<\/a> I had at the time to do this, and read more about PHPUnit extenions in the <a href=\"https:\/\/docs.phpunit.de\/en\/10.5\/extending-phpunit.html#implementing-an-extension\" target=\"_self\">PHPUnit Documentation<\/a>.<\/p><p>Here's a link to the <a href=\"https:\/\/github.com\/matthewdeaves\/willow\/blob\/aafbd57770b24c39644b4d87c9fc7e5872e75639\/phpunit.xml.dist#L1\" target=\"_self\">phpunit.xml.dist<\/a> file as it is today.<\/p><h3>2. Continuous Integration with GitHub Actions (.github\/workflows\/ci.yml)<\/h3><p>&nbsp;To automate my testing process, I've set up a continuous integration (CI) workflow using GitHub Actions. I found GitHub Actions quite fiddly at first as it required multiple rounds of making a configuration change, committing that change to the repository and then pushing up to GitHub to see if it worked. If you don't know about GitHub actions read more [here](https:\/\/github.com\/features\/actions), it is brilliant and I'm really only scratching the surface.<\/p><p>The `.github\/workflows\/ci.yml` file defines the steps to be executed on a virtual machine in the cloud whenever I push changes to specific branches or create a pull request. The steps include installing software on the machine as well as configuration. Take a <a href=\"https:\/\/github.com\/matthewdeaves\/willow\/blob\/main\/.github\/workflows\/ci.yml\" target=\"_self\">look at the file<\/a> to see how I'm doing things like installing and starting MySQL, installing PHP dependencies with composer and copying CakePHP configuration files into place.<\/p><p>You only get one virtual machine and only so many minutes of execution time per month so you want this stage to be as lightweight and fast as possible. Unlike the Docker development environment (future blog post) I'm not setting up nice to haves like redis, PHPMyAdmin etc - this is just a single virtual machine with the bare essentials to enable setting up a MySQL database, installing PHP dependencies, running PHPUnit tests, and performing static analysis with tools like PHP CodeSniffer and PHPStan. The end goal is that my code should be thoroughly tested and adhere to coding standards before it gets merged into the main branch.<\/p><h3>3. Shared Test Case Code (tests\/TestCase\/AppControllerTestCase.php)<\/h3><p>To keep my test code DRY (Don't Repeat Yourself), I've created a reusable `AppControllerTestCase` class that extends the CakePHP `TestCase`. This class provides common functionality for controller tests, which for the moment is just simulating user authentication methods via the `loginUser` method. Take a <a href=\"https:\/\/github.com\/matthewdeaves\/willow\/blob\/aafbd57770b24c39644b4d87c9fc7e5872e75639\/tests\/TestCase\/AppControllerTestCase.php\" target=\"_self\">look at the file<\/a>.<\/p><p>Although I do have tests for the <a href=\"https:\/\/github.com\/matthewdeaves\/willow\/blob\/4a878648f7a887533e5dbd71a274e33543ae7e4c\/tests\/TestCase\/Controller\/UsersControllerTest.php#L95\" target=\"_self\">login method<\/a>, I don't want to have to perform that 'proper' login (posting test user credentials to the login action) every time I want to test a feature in the admin area. Test code should hone in on the specific thing being tested and not introduce code before or after that which we're trying to test and that requires a mechanism to easily have a starting point with a logged in user.<br><\/p><p>Take a look at some tests in the user controller that simply call the <a href=\"https:\/\/github.com\/matthewdeaves\/willow\/blob\/4a878648f7a887533e5dbd71a274e33543ae7e4c\/tests\/TestCase\/Controller\/UsersControllerTest.php#L308\" target=\"_self\">loginUser<\/a> method and then get straight into the actual test.<\/p><h3>4. Controller Tests for the Imporant Stuff (tests\/TestCase\/Controller\/UsersControllerTest.php)<\/h3><p>One of the critical areas I focus on testing is the `UsersController` and the `ArticlesController`, for both the admin and non-admin site. The `UsersControllerTest` class covers a wide range of scenarios, including login, logout, registration, email confirmation, and user editing in both the admin area and front-end site for registered users. Take a look at the files <a href=\"https:\/\/github.com\/matthewdeaves\/willow\/blob\/aafbd57770b24c39644b4d87c9fc7e5872e75639\/tests\/TestCase\/Controller\/UsersControllerTest.php\" target=\"_self\">here<\/a> and <a href=\"https:\/\/github.com\/matthewdeaves\/willow\/blob\/4a878648f7a887533e5dbd71a274e33543ae7e4c\/tests\/TestCase\/Controller\/ArticlesControllerTest.php\" target=\"_self\">here<\/a>. It's the same story for the `ArticlesControllerTest`. One improvement for the future would be to break these out into seperate test cases for the the admin and non-admin controllers.<\/p><p>It's good practice to test both successful and <a href=\"https:\/\/github.com\/matthewdeaves\/willow\/blob\/aafbd57770b24c39644b4d87c9fc7e5872e75639\/tests\/TestCase\/Controller\/UsersControllerTest.php#L129\" target=\"_self\">unsuccessful<\/a> scenarios to ensure that the application behaves correctly - don't just test the happy path.<\/p><p>For example, I verify that a non-admin user can log in <a href=\"https:\/\/github.com\/matthewdeaves\/willow\/blob\/aafbd57770b24c39644b4d87c9fc7e5872e75639\/tests\/TestCase\/Controller\/UsersControllerTest.php#L95\" target=\"_self\">successfully<\/a> and be redirected to the homepage, and an admin user is <a href=\"https:\/\/github.com\/matthewdeaves\/willow\/blob\/aafbd57770b24c39644b4d87c9fc7e5872e75639\/tests\/TestCase\/Controller\/UsersControllerTest.php#L112\" target=\"_self\">redirected<\/a> to the admin articles page, as well as testing that a non-admin user or non-logged in user is denied access to the admin area.<\/p><h3>5. Code Coverage Report<\/h3><p>You need to know where you are to better understand where you need to get to with testing. To gain insights into the coverage of my tests, I generate a code coverage report using PHPUnit. I have aliases set up in my `dev_aliases.txt` file to easily run PHPUnit with coverage options. Take a look <a href=\"https:\/\/github.com\/matthewdeaves\/willow\/blob\/4a878648f7a887533e5dbd71a274e33543ae7e4c\/dev_aliases.txt#L18\" target=\"_self\">here<\/a>.<\/p><p>The `phpunit_cov` alias generates a text-based coverage report shown in the terminal, while `phpunit_cov_html` produces an HTML report in the `webroot\/coverage` directory. These reports help me identify areas of the codebase that lack sufficient test coverage and guide me in writing additional tests.<\/p><p>By implementing these testing practices, I've achieved several benefits:<\/p><ul><li>Increased confidence in the stability and reliability of Willow CMS<\/li><li>Early detection of bugs and regressions through automated testing - I know very quickly if my latest code has broken core functionality<\/li><li>Improved code quality by enforcing coding standards and best practices<\/li><li>Faster development cycles by catching issues early in the development process<\/li><li>Easier collaboration with (hopefully) other developers through a well-defined testing strategy<\/li><\/ul><p>Looking ahead, there are a few improvements I plan to make:<\/p><ul><li>Break out the test cases between admin and non admin features for key controllers<\/li><li>Expand the test suite to cover more edge cases and complex scenarios as I add features<\/li><li>Make more use of the local Jenkins Docker container that is part of the developer environment to run a suite of automated front-end tests via different browsers<\/li><\/ul><p>So, current me absolutely thanks past me for putting the effort in with these tests, and I'm sure future me will thank current me for continuing to add to them. Testing is not just about catching bugs; it's about building confidence in your code and enabling faster, more reliable development cycles.<\/p><p>Further reading:<\/p><ul><li>More about testing CakePHP applications with PHPUnit <a href=\"https:\/\/book.cakephp.org\/5\/en\/development\/testing.html\" target=\"_self\">here<\/a>.<\/li><li>More about PHPUnit <a href=\"https:\/\/phpunit.de\/index.html\" target=\"_self\">here<\/a><\/li><\/ul><p>Happy testing! Now you're up to speed, how about reading on for the more detailed breakdown of the GitHub Actions ci.yml file.<\/p><h3>Deep Dive - ci.yml for GitHub Actions<br><\/h3><p>The `ci.yml` file has all the magic&nbsp; for automating the continuous integration process with GitHub Actions. Let's break down its structure and functionality in detail. You can take a look at an actual run of the workflow <a href=\"https:\/\/github.com\/matthewdeaves\/willow\/actions\/runs\/11921341609\" target=\"_self\">here<\/a><br><\/p><h4>Name and Trigger Events<\/h4><p>The workflow is named `CI`, which stands for Continuous Integration. It is designed to run automatically on specific events:<strong><br><\/strong><\/p><ul><li><strong>Push Events<\/strong>: The workflow triggers on pushes to the `main`, `development`, `staging`, and any branches that follow the `feature\/*` naming convention. This ensures that any changes pushed to these branches are automatically tested.<\/li><li><strong>Pull Request Events<\/strong>: It also triggers on pull requests targeting the `main`, `development`, and `staging` branches. This helps in validating the changes before they are merged into these critical branches.<\/li><\/ul><p><span style=\"color: #569cd6;\">on<\/span><span style=\"color: #cccccc;\">:<\/span><\/p><p><span style=\"color: #cccccc;\">  <\/span><span style=\"color: #569cd6;\">push<\/span><span style=\"color: #cccccc;\">:<\/span><\/p><p><span style=\"color: #cccccc;\">    <\/span><span style=\"color: #569cd6;\">branches<\/span><span style=\"color: #cccccc;\">:<\/span><\/p><p><span style=\"color: #cccccc;\">      - <\/span><span style=\"color: #ce9178;\">main<\/span><\/p><p><span style=\"color: #cccccc;\">      - <\/span><span style=\"color: #ce9178;\">development<\/span><\/p><p><span style=\"color: #cccccc;\">      - <\/span><span style=\"color: #ce9178;\">staging<\/span><\/p><p><span style=\"color: #cccccc;\">      - <\/span><span style=\"color: #ce9178;\">'feature\/*'<\/span><\/p><p><span style=\"color: #cccccc;\">  <\/span><span style=\"color: #569cd6;\">pull_request<\/span><span style=\"color: #cccccc;\">:<\/span><\/p><p><span style=\"color: #cccccc;\">    <\/span><span style=\"color: #569cd6;\">branches<\/span><span style=\"color: #cccccc;\">:<\/span><\/p><p><span style=\"color: #cccccc;\">      - <\/span><span style=\"color: #ce9178;\">main<\/span><\/p><p><span style=\"color: #cccccc;\">      - <\/span><span style=\"color: #ce9178;\">development<\/span><\/p><p><span style=\"color: #cccccc;\">      - <\/span><span style=\"color: #ce9178;\">staging<\/span><\/p><h4>Jobs and Environment<\/h4><p>The workflow defines a single job named `test`, which runs on the `ubuntu-latest` environment. This ensures that the tests are executed in a consistent and up-to-date Linux environment.<\/p><p style=\"color: #cccccc;background-color: #1f1f1f;font-family: 'Droid Sans Mono', 'monospace', monospace;font-weight: normal;font-size: 14px;line-height: 19px;white-space: pre;\"><\/p><p><span style=\"color: #569cd6;\">jobs<\/span><span style=\"color: #cccccc;\">:<\/span><\/p><p><span style=\"color: #cccccc;\">  <\/span><span style=\"color: #569cd6;\">test<\/span><span style=\"color: #cccccc;\">:<\/span><\/p><p><span style=\"color: #cccccc;\">    <\/span><span style=\"color: #569cd6;\">runs-on<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #ce9178;\">ubuntu-latest<\/span><\/p><p><\/p><h4>Matrix Strategy<\/h4><p>I've chosen a strategy matrix&nbsp; to test the application across multiple PHP versions (`8.1`, `8.2`, `8.3`). We could add to this and include PHP 8.4 very easily.<\/p><p style=\"color: #cccccc;background-color: #1f1f1f;font-family: 'Droid Sans Mono', 'monospace', monospace;font-weight: normal;font-size: 14px;line-height: 19px;white-space: pre;\"><\/p><p><span style=\"color: #cccccc;\">    <\/span><span style=\"color: #569cd6;\">strategy<\/span><span style=\"color: #cccccc;\">:<\/span><\/p><p><span style=\"color: #cccccc;\">      <\/span><span style=\"color: #569cd6;\">matrix<\/span><span style=\"color: #cccccc;\">:<\/span><\/p><p><span style=\"color: #cccccc;\">        <\/span><span style=\"color: #569cd6;\">php-version<\/span><span style=\"color: #cccccc;\">: [<\/span><span style=\"color: #ce9178;\">'8.1'<\/span><span style=\"color: #cccccc;\">, <\/span><span style=\"color: #ce9178;\">'8.2'<\/span><span style=\"color: #cccccc;\">, <\/span><span style=\"color: #ce9178;\">'8.3'<\/span><span style=\"color: #cccccc;\">]<\/span><\/p><p><\/p><h4>Steps Breakdown<\/h4><p><strong>1. Checkout Code: <\/strong><br>The `actions\/checkout@v4` action is used to clone the repository code into the runner environment. This is usually the first step in any CI process as it provides the codebase to work with.<\/p><p style=\"color: #cccccc;background-color: #1f1f1f;font-family: 'Droid Sans Mono', 'monospace', monospace;font-weight: normal;font-size: 14px;line-height: 19px;white-space: pre;\"><\/p><p><span style=\"color: #cccccc;\">    <\/span><span style=\"color: #569cd6;\">steps<\/span><span style=\"color: #cccccc;\">:<\/span><\/p><p><span style=\"color: #cccccc;\">    - <\/span><span style=\"color: #569cd6;\">uses<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #ce9178;\">actions\/checkout@v4<\/span><\/p><p><\/p><p><strong>2. Setup MySQL:<\/strong><br>MySQL service is started, and a test database `cms_test` is created. Note that we don't load any SQL to create database tables - that is handled by CakePHP running the migrations when we execute the tests because the <a href=\"https:\/\/github.com\/matthewdeaves\/willow\/blob\/4a878648f7a887533e5dbd71a274e33543ae7e4c\/phpunit.xml.dist\" target=\"_self\">phpunit.xml.dist<\/a> file specifies the test specific bootstrap file to kick things off: <span style=\"color: #9cdcfe;\">bootstrap<\/span><span style=\"color: #cccccc;\">=<\/span><span style=\"color: #ce9178;\">\"tests\/bootstrap.php\"<\/span><\/p><p style=\"color: #cccccc;background-color: #1f1f1f;font-family: 'Droid Sans Mono', 'monospace', monospace;font-weight: normal;font-size: 14px;line-height: 19px;white-space: pre;\"><\/p><p><span style=\"color: #cccccc;\">    - <\/span><span style=\"color: #569cd6;\">name<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #ce9178;\">Setup MySQL<\/span><\/p><p><span style=\"color: #cccccc;\">      <\/span><span style=\"color: #569cd6;\">run<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #c586c0;\">|<\/span><\/p><p><span style=\"color: #ce9178;\">        sudo service mysql start<\/span><\/p><p><span style=\"color: #ce9178;\">        mysql -e 'CREATE DATABASE IF NOT EXISTS cms_test;' -uroot -proot<\/span><\/p><p><span style=\"color: #ce9178;\">        mysql -e 'SHOW DATABASES;' -uroot -proot<\/span><\/p><p><\/p><p><strong>3. Setup PHP:<\/strong><br>The `shivammathur\/setup-php@v2` action is used to set up the specified PHP version from the matrix. It also installs necessary PHP extensions like `mbstring`, `intl`, `pdo_mysql`, etc., and enables code coverage with `xdebug`.<\/p><p style=\"color: #cccccc;background-color: #1f1f1f;font-family: 'Droid Sans Mono', 'monospace', monospace;font-weight: normal;font-size: 14px;line-height: 19px;white-space: pre;\"><\/p><p><span style=\"color: #cccccc;\">    - <\/span><span style=\"color: #569cd6;\">name<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #ce9178;\">Setup PHP<\/span><\/p><p><span style=\"color: #cccccc;\">      <\/span><span style=\"color: #569cd6;\">uses<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #ce9178;\">shivammathur\/setup-php@v2<\/span><\/p><p><span style=\"color: #cccccc;\">      <\/span><span style=\"color: #569cd6;\">with<\/span><span style=\"color: #cccccc;\">:<\/span><\/p><p><span style=\"color: #cccccc;\">        <\/span><span style=\"color: #569cd6;\">php-version<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #d4d4d4;\">${{ <\/span><span style=\"color: #9cdcfe;\">matrix<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #9cdcfe;\">php-version<\/span><span style=\"color: #d4d4d4;\"> }}<\/span><\/p><p><span style=\"color: #cccccc;\">        <\/span><span style=\"color: #569cd6;\">extensions<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #ce9178;\">mbstring, intl, pdo_mysql, pcntl, sockets, bcmath, zip<\/span><\/p><p><span style=\"color: #cccccc;\">        <\/span><span style=\"color: #569cd6;\">coverage<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #ce9178;\">xdebug<\/span><\/p><p><\/p><p><strong>4. Install Composer Dependencies:<\/strong><br>Composer is configured to use the PHP version from the matrix, and dependencies are updated. The `--no-interaction`, `--prefer-dist`, and `--ignore-platform-reqs` flags ensure a smooth and non-interactive installation process. This is the step that installs the CakePHP framework and other things Willow CMS uses into the \/vendors folder.<\/p><p style=\"color: #cccccc;background-color: #1f1f1f;font-family: 'Droid Sans Mono', 'monospace', monospace;font-weight: normal;font-size: 14px;line-height: 19px;white-space: pre;\"><\/p><p><span style=\"color: #cccccc;\">    - <\/span><span style=\"color: #569cd6;\">name<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #ce9178;\">Install Composer dependencies<\/span><\/p><p><span style=\"color: #cccccc;\">      <\/span><span style=\"color: #569cd6;\">run<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #c586c0;\">|<\/span><\/p><p><span style=\"color: #ce9178;\">        composer config platform.php <\/span><span style=\"color: #d4d4d4;\">${{ <\/span><span style=\"color: #9cdcfe;\">matrix<\/span><span style=\"color: #d4d4d4;\">.<\/span><span style=\"color: #9cdcfe;\">php-version<\/span><span style=\"color: #d4d4d4;\"> }}<\/span><\/p><p><span style=\"color: #ce9178;\">        composer update --no-interaction --prefer-dist --ignore-platform-reqs<\/span><\/p><p><\/p><p><strong>5. Copy Configs:<\/strong><br>Configuration files are copied from a specified directory to the application's config directory. This step ensures that the application is using the correct environment-specific configurations during the tests. Given the Docker development environment has multiple containers for different services and GitHub Actions gives the job a single VM, there are important configuration differences such as the MySQL server address. We could do more with environment variables for this, but for now, this is simple and works.<\/p><p style=\"color: #cccccc;background-color: #1f1f1f;font-family: 'Droid Sans Mono', 'monospace', monospace;font-weight: normal;font-size: 14px;line-height: 19px;white-space: pre;\"><\/p><p><span style=\"color: #cccccc;\">    - <\/span><span style=\"color: #569cd6;\">name<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #ce9178;\">Copy Configs<\/span><\/p><p><span style=\"color: #cccccc;\">      <\/span><span style=\"color: #569cd6;\">run<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #c586c0;\">|<\/span><\/p><p><span style=\"color: #ce9178;\">        cp docker\/github\/cms_app_local_github.php config\/app_local.php<\/span><\/p><p><span style=\"color: #ce9178;\">        cp docker\/github\/app_github.php config\/app.php<\/span><\/p><p><\/p><p><strong>6. Debug app_local.php:<\/strong><br>The contents of `app_local.php` are displayed. This is useful for debugging and verifying that the correct configuration is being used should something go wrong.<\/p><p style=\"color: #cccccc;background-color: #1f1f1f;font-family: 'Droid Sans Mono', 'monospace', monospace;font-weight: normal;font-size: 14px;line-height: 19px;white-space: pre;\"><\/p><p><span style=\"color: #cccccc;\">    - <\/span><span style=\"color: #569cd6;\">name<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #ce9178;\">Debug app_local.php<\/span><\/p><p><span style=\"color: #cccccc;\">      <\/span><span style=\"color: #569cd6;\">run<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #ce9178;\">cat \"config\/app_local.php\"<\/span><\/p><p><\/p><p><strong>7. Run PHPUnit:<\/strong><br>PHPUnit tests are executed with error display enabled. The `XDEBUG_MODE: coverage` environment variable is set to collect code coverage data so that you can read the coverage stats in the output. I think in future I might turn this off as in practice they are not very easy to read on GitHub.<\/p><p style=\"color: #cccccc;background-color: #1f1f1f;font-family: 'Droid Sans Mono', 'monospace', monospace;font-weight: normal;font-size: 14px;line-height: 19px;white-space: pre;\"><\/p><p><span style=\"color: #cccccc;\">    - <\/span><span style=\"color: #569cd6;\">name<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #ce9178;\">Run PHPUnit<\/span><\/p><p><span style=\"color: #cccccc;\">      <\/span><span style=\"color: #569cd6;\">run<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #ce9178;\">php -d display_errors=on -d error_reporting=E_ALL vendor\/bin\/phpunit<\/span><\/p><p><span style=\"color: #cccccc;\">      <\/span><span style=\"color: #569cd6;\">env<\/span><span style=\"color: #cccccc;\">:<\/span><\/p><p><span style=\"color: #cccccc;\">        <\/span><span style=\"color: #569cd6;\">XDEBUG_MODE<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #ce9178;\">coverage<\/span><\/p><p><\/p><p><strong>8. Run PHP CodeSniffer:<\/strong><br>PHP CodeSniffer is run to ensure that the code adheres to the CakePHP coding standards. This helps maintain code quality and consistency. It will pick up on white-space errors, yoda comparisons, PHP use statements that are out of alphabetical order, unused variables and more.<\/p><p style=\"color: #cccccc;background-color: #1f1f1f;font-family: 'Droid Sans Mono', 'monospace', monospace;font-weight: normal;font-size: 14px;line-height: 19px;white-space: pre;\"><\/p><p><span style=\"color: #cccccc;\">    - <\/span><span style=\"color: #569cd6;\">name<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #ce9178;\">Run PHP CodeSniffer<\/span><\/p><p><span style=\"color: #cccccc;\">      <\/span><span style=\"color: #569cd6;\">run<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #ce9178;\">vendor\/bin\/phpcs --standard=vendor\/cakephp\/cakephp-codesniffer\/CakePHP src\/ tests\/<\/span><\/p><p><\/p><p><strong>9. Run PHPStan:<\/strong><br>PHPStan is used for static analysis of the code. It checks for potential errors and code quality issues. The `continue-on-error: true` option allows the workflow to proceed even if PHPStan finds issues, which can be useful for non-blocking feedback. You'll see that I've configured the job to continue on error with this step as right now, focussing on writing tests and adhering to the CakePHP coding standards is good enough.<\/p><p style=\"color: #cccccc;background-color: #1f1f1f;font-family: 'Droid Sans Mono', 'monospace', monospace;font-weight: normal;font-size: 14px;line-height: 19px;white-space: pre;\"><\/p><div><span style=\"color: #cccccc;\">    - <\/span><span style=\"color: #569cd6;\">name<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #ce9178;\">Run PHPStan<\/span><\/div><div><span style=\"color: #cccccc;\">      <\/span><span style=\"color: #569cd6;\">run<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #ce9178;\">php -d memory_limit=-1 vendor\/bin\/phpstan analyse src\/<\/span><\/div><div><span style=\"color: #cccccc;\">      <\/span><span style=\"color: #569cd6;\">continue-on-error<\/span><span style=\"color: #cccccc;\">: <\/span><span style=\"color: #569cd6;\">true<\/span><\/div><p><\/p>",
        "summary": "<p>This post is about how I've setup PHPUnit on the local development environment and\r\n on GitHub Actions for Willow CMS. At the time of writing, Willow has \r\n116 tests and 414 assertions. This gives me a reasonable level of \r\nconfidence to ensure the reliability and quality of the codebase and helps me develop features faster with quick testing cycles. I cover PHPUnit configuration and best practices when running and writing tests with examples taken directly from the Willow CMS codebase. We also take a deep dive into the ci.yml file that has all the configuration and steps for testing Willow CMS on multiple versions of PHP in one go.<br><\/p>",
        "image": null,
        "alt_text": null,
        "keywords": null,
        "name": null,
        "dir": null,
        "size": null,
        "mime": null,
        "is_published": true,
        "published": "2024-11-19T21:09:13+00:00",
        "meta_title": "",
        "meta_description": "",
        "meta_keywords": "",
        "facebook_description": "",
        "linkedin_description": "",
        "instagram_description": "",
        "twitter_description": "",
        "word_count": 2105,
        "parent_id": null,
        "lft": 3,
        "rght": 4
    },
    {
        "user_id": "1ce2bfdd-2272-4042-8b6e-818a9af2e8fd",
        "kind": "page",
        "featured": false,
        "title": "Privacy Policy",
        "lead": "",
        "slug": "privacy-policy",
        "body": "<h1>Privacy Policy<\/h1><p>Last Updated: 11th November 2004<\/p><h2>1. Introduction<\/h2><p>Welcome to WillowCMS.app (\"we,\" \"our,\" or \"us\"). We are committed to protecting your privacy and personal data. This privacy policy explains how we collect, use, and protect your information when you use our website.<\/p><h2>2. Who We Are<\/h2><p>We operate WillowCMS, hosted in London, United Kingdom through Linode. For privacy-related questions, please contact hello@willowcms.com.<\/p><h2>3. Data Protection Officer<\/h2><p>Our Data Protection Officer can be contacted at hello@willowcms.com.<\/p><h2>4. Information We Collect<\/h2><h3>4.1 Account Information:<\/h3><ol><li>Email address<\/li><li>Username<\/li><li>Password (stored in encrypted format)<\/li><li>Account creation date<\/li><\/ol><h3>4.2 Comments (if enabled):<\/h3><ol><li>Comment content<\/li><li>Date and time of submission<\/li><\/ol><h3>4.3 Cookies and Similar Technologies:<\/h3><p>Essential Cookies (necessary for website functionality):<\/p><ol><li>consent_cookie: Stores your cookie preferences (expires after 1 year)<\/li><li>csrfToken: Security token (expires after 30 days)<\/li><li>PHPSESSID: Session management (expires after 30 days)<\/li><\/ol><p>Optional Cookies:<\/p><ol><li>Analytics Cookies: Google Analytics (only if you consent)<\/li><li>Functional Cookies: Currently not in use, but may be implemented in future for features such as remembering your preferred language with which to view the site<br><\/li><li>Marketing Cookies: Facebook SDK and Facebook share button (only if you consent)<br><\/li><\/ol><h2>5. How We Use Your Information<\/h2><p>We use your information for:<\/p><ol><li>Account management (if account registrations are enabled)<br><\/li><li>Website functionality<\/li><li>Comment moderation (using Anthropic AI, if comments are enabled)<\/li><li>Analytics (using Google Analytics, if consented)<\/li><li>Marketing (using Facebook SDK and share button, if consented)<br><\/li><li>Communication regarding your account (password resets, account confirmation)<\/li><\/ol><h2>6. Legal Basis for Processing (GDPR)<\/h2><p>We process your data under the following legal bases:<\/p><ol><li>Contractual necessity (account management)<\/li><li>Consent (Google analytics, Facebook)<\/li><li>Legitimate interests (security, comment moderation)<\/li><\/ol><h2>7. Data Sharing<\/h2><p>We share data with:<\/p><ol><li>Google Analytics (only with your consent)<\/li><li>Anthropic AI (for comment moderation only)<\/li><li>Apple iCloud (for email delivery)<\/li><li>Facebook (for the share button)<\/li><\/ol><p>We do not sell your personal data to any third parties.<\/p><h2>8. Data Storage and Security<\/h2><p>All data is stored in London, UK through Linode. Daily backups are maintained within the same location.<\/p><h2>9. Your Rights<\/h2><p>You have the right to:<\/p><ol><li>Access your personal data<\/li><li>Correct your personal data<\/li><li>Delete your account and data<\/li><li>Withdraw cookie consent (except for essential cookies)<br><\/li><li>Request your data via email to hello@willowcms.com<\/li><\/ol><h2>10. Cookie Management<\/h2><p>You can manage your cookie preferences through your account settings at any time. Essential cookies cannot be disabled as they are required for website functionality.<\/p><h2>11. Data Retention<\/h2><ol><li>Account data is deleted immediately upon account deletion<\/li><li>Server backups are maintained for 24 hours<\/li><li>Cookie retention varies by type (as detailed in section 4.3)<\/li><\/ol><h2>12. Age Restrictions<\/h2><p>While anyone can visit the website, you must be 18 or older to create an account. Account registration is currently disabled.<br><\/p><h2>13. Automated Decision Making<\/h2><p>We use Anthropic AI for automated comment moderation. No other automated decision-making or profiling is performed.<\/p><h2>14. Data Breach Procedures<\/h2><p>In the event of a data breach, we will notify affected users and relevant authorities within 72 hours of discovery, as required by GDPR.<\/p><h2>15. Changes to This Policy<\/h2><p>We review this privacy policy monthly. Any changes will be posted on this page with an updated revision date.<\/p><h2>16. Additional Information<\/h2><p>We do not:<\/p><ol><li>- Store user activity logs beyond Google Analytics (if consented)<\/li><li>- Collect device or location information beyond Google Analytics<\/li><li>- Send marketing communications<\/li><li>- Process payments<\/li><li>- Share data with any other third parties<\/li><\/ol><h2>17. Contact Information<\/h2><p>For any privacy-related queries, please contact:<\/p><p>hello@willowcms.com<\/p>",
        "summary": "",
        "image": null,
        "alt_text": null,
        "keywords": null,
        "name": null,
        "dir": null,
        "size": null,
        "mime": null,
        "is_published": true,
        "published": "2024-11-18T21:09:01+00:00",
        "meta_title": "",
        "meta_description": "",
        "meta_keywords": "",
        "facebook_description": "",
        "linkedin_description": "",
        "instagram_description": "",
        "twitter_description": "",
        "word_count": 519,
        "parent_id": null,
        "lft": 1,
        "rght": 2
    }
]