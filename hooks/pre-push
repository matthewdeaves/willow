#!/bin/bash

# This hook script runs code quality checks before allowing a push.
# If any checks fail, the push is aborted.

# Self-update mechanism: Check if this hook is outdated and update if necessary
SCRIPT_DIR="$(cd "$(dirname "$0")" && cd ../.. && pwd)"
SOURCE_HOOK="$SCRIPT_DIR/hooks/pre-push"
CURRENT_HOOK="$SCRIPT_DIR/.git/hooks/pre-push"

# Only check for updates if the source hook exists and is different
if [ -f "$SOURCE_HOOK" ] && [ -f "$CURRENT_HOOK" ] && ! cmp -s "$SOURCE_HOOK" "$CURRENT_HOOK"; then
    echo "üîÑ Git hook is outdated. Updating..."
    
    # Run the setup script to update hooks (in quiet mode)
    if [ -f "$SCRIPT_DIR/setup_dev_aliases.sh" ]; then
        cd "$SCRIPT_DIR"
        ./setup_dev_aliases.sh --quiet
        
        # Determine which RC file to source
        if [ -f ~/.zshrc ]; then
            RC_FILE=~/.zshrc
        elif [ -f ~/.bashrc ]; then
            RC_FILE=~/.bashrc
        fi
        
        # Source the RC file if it exists to ensure latest aliases are available
        if [ -n "$RC_FILE" ] && [ -f "$RC_FILE" ]; then
            source "$RC_FILE" 2>/dev/null || true
        fi
        
        echo "‚úÖ Git hook updated successfully."
        echo ""
        
        # Re-execute the updated hook
        if [ -f "$CURRENT_HOOK" ] && [ "$CURRENT_HOOK" -ef "$0" ]; then
            # If we're the same file, just continue with updated content
            true
        else
            # If the hook was replaced, execute the new version
            exec "$CURRENT_HOOK" "$@"
        fi
    else
        echo "‚ö†Ô∏è  Could not find setup_dev_aliases.sh. Continuing with current hook."
    fi
fi

# Function to determine if sudo is needed
needs_sudo() {
    if [ "$OS" = "Linux" ]; then
        echo "sudo"
    else
        echo ""
    fi
}

echo "=== Pre-push Code Quality Checks ==="

# Step 1: Run PHP CodeSniffer check
echo "Running PHP CodeSniffer check..."
$(needs_sudo) docker compose exec -T willowcms vendor/bin/phpcs --standard=vendor/cakephp/cakephp-codesniffer/CakePHP src/ tests/

# Check the exit status of PHP CodeSniffer
if [ $? -ne 0 ]; then
    echo ""
    echo "‚ùå PHP CodeSniffer found coding standard violations."
    echo "   Run 'phpcs_fix' to auto-fix issues, then stage and commit the changes."
    echo "   Aborting push."
    exit 1
fi

echo "‚úÖ PHP CodeSniffer checks passed."

# Step 2: Run PHPUnit tests
echo "Running PHPUnit tests..."
$(needs_sudo) docker compose exec -T willowcms php vendor/bin/phpunit

# Check the exit status of PHPUnit
if [ $? -ne 0 ]; then
    echo ""
    echo "‚ùå PHPUnit tests failed. Aborting push."
    exit 1
fi

echo "‚úÖ PHPUnit tests passed."
echo ""
echo "üéâ All code quality checks passed. Proceeding with push."

# Continue with the push
exit 0